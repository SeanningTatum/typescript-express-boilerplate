import { Response, Request } from 'express';
import { body } from 'express-validator';
import { ReasonPhrases, StatusCodes } from 'http-status-codes';
import { {{pascalCase rootRoute}}Model } from '~/models/{{pascalCase rootRoute}}';
import { GenericReturn } from '~/types/Return';

/**
 * @swagger
 *
 * /api/{{lowerCase version}}/{{lowerCase rootRoute}}/{{pascalCase routeName}}:
 *  post:
 *    tags: [{{pascalCase rootRoute}}]
 *    description: {{upperCase method}} {{camelCase routeName}}
 *    produces: application/json
 *    parameters:
 *      - name: {{lowerCase rootRoute}}
 *        in: body
 *        schema:
 *          type: object
 *          required:
 *            - id
 *          properties:
 *            id:
 *              type: string
 *    responses:
 *      200:
 *        description: Success
 *        schema:
 *          $ref: '#/definitions/{{pascalCase rootRoute}}'
 *      400:
 *        description: Invalid Body or Params
 *
 */
interface RequestBody {
    id: string;
}

interface ReturnValue extends GenericReturn<{{pascalCase rootRoute}}Model> {}

export const {{camelCase routeName}}Params = [
  body('id').exists({ checkNull: true, checkFalsy: true }),
];

function {{camelCase routeName}}(req: Request<{}, {}, RequestBody>, res: Response<ReturnValue>) {

  // Logic CRUD to database
  const mock{{pascalCase rootRoute}} = {
    id: req.body.id,
   }

  return res.status(StatusCodes.OK).json({
    code: StatusCodes.OK,
    message: ReasonPhrases.OK,
    body: mock{{pascalCase rootRoute}},
  });
}

export default {{camelCase routeName}};
